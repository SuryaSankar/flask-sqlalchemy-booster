from flask_sqlalchemy_booster import FlaskSQLAlchemyBooster
from sqlalchemy import func
from flask_sqlalchemy_booster import FlaskBooster
from flask_sqlalchemy_booster.entities_router import EntitiesRouter, Entity, Get, Index, Put, Post
from sqlalchemy.ext.associationproxy import association_proxy

from werkzeug.serving import run_simple


db = FlaskSQLAlchemyBooster()


class Project(db.Model):

    allow_updation_based_on_unique_keys = True

    id = db.Column(db.Integer, primary_key=True, unique=True)
    created_on = db.Column(db.DateTime(), default=func.now())
    name = db.Column(db.String(300), unique=True)
    owning_user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    owning_team_id = db.Column(db.Integer, db.ForeignKey('team.id'))
    description = db.Column(db.Text)

    owning_user = db.relationship("User", backref=db.backref("projects"))
    owning_team = db.relationship("Team", backref=db.backref("projects"))


class Team(db.Model):

    id = db.Column(db.Integer, primary_key=True, unique=True)
    created_on = db.Column(db.DateTime(), default=func.now())
    name = db.Column(db.String(300))


class Task(db.Model):
    _autogenerate_dict_struct_if_none_ = True

    id = db.Column(db.Integer, primary_key=True, unique=True)
    created_on = db.Column(db.DateTime(), default=func.now())
    title = db.Column(db.String(300))
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    project_id = db.Column(db.Integer, db.ForeignKey('project.id'))
    completed = db.Column(db.Boolean, default=False)
    completed_on = db.Column(db.DateTime())

    user = db.relationship("User", backref=db.backref("tasks"))
    project = db.relationship("Project")
    user_email = association_proxy(
        "user", "email", creator=lambda email: User.first(email=email)
    )


class User(db.Model):
    _autogenerate_dict_struct_if_none_ = True

    id = db.Column(db.Integer, primary_key=True, unique=True)
    created_on = db.Column(db.DateTime(), default=func.now())
    name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(100), unique=True, nullable=False)
    gender = db.Column(
        db.Enum('male', 'female', 'transgender'), nullable=False)
    marital_status = db.Column(db.Enum('married', 'single'))

    @property
    def first_name(self):
        return self.name.split(" ")[0]

    @classmethod
    def attrs_for_autogenerated_dict_struct(cls):
        return super(User, cls).attrs_for_autogenerated_dict_struct() + ['first_name']


class TeamMembership(db.Model):
    __table_args__ = (
        db.UniqueConstraint(
            'user_id', 'team_id',
            name='user_id_team_id_uc'),
    )
    id = db.Column(db.Integer, primary_key=True, unique=True)
    created_on = db.Column(db.DateTime(), default=func.now())
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    team_id = db.Column(db.Integer, db.ForeignKey('team.id'))
    role = db.Column(db.Enum("Manager", "Lead", "Developer", "Tester"))

    user = db.relationship("User", backref=db.backref("team_memberships"))
    team = db.relationship("Team", backref=db.backref("memberships"))


def create_todolist_app(testing=False):
    app = FlaskBooster(__name__)

    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite://'
    app.config['DEBUG'] = True
    app.testing = testing

    db.init_app(app)

    with app.app_context():
        db.create_all()

    todolist_entities = EntitiesRouter(
        routes={
            "tasks": Entity(
                model_class=Task, get=Get(), index=Index(),
                post=Post(), put=Put()
            ),
            "users": Entity(
                model_class=User, get=Get(id_attr='email'), index=Index(),
                post=Post(), put=Put(),
                remove_property_keys_before_validation=True,
                response_dict_struct= {
                    'rels': {
                        'tasks': {},
                        'projects': {}
                    }
                }
            ),
            "teams": Entity(
                model_class=Team, get=Get(), index=Index(),
                post=Post(), put=Put()
            ),
            "projects": Entity(
                model_class=Project, get=Get(), index=Index(),
                post=Post(), put=Put()
            )
        }
    )
    todolist_entities.mount_on(app)
    return app

def run_application(app):
    run_simple('0.0.0.0', 5000, app)



if __name__ == '__main__':
    app = create_todolist_app()
    run_application(app)
